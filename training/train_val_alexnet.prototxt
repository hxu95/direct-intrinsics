name: "train_AlexNet"

##### Training data #####

layer {
  name: "data"
  type: "Python"
  top: "data"
  python_param {
    module: "caffe_helper.layers.data_layers"
    layer: "ImageDataLayer"
    param_str: "dict(batch_size=4, source=expandvars('/afs/csail.mit.edu/u/y/ylkuo/project/cv_final/direct-intrinsics/data/synthetic/sources/source_shadow_train.txt'), root=expandvars('/afs/csail.mit.edu/u/y/ylkuo/project/cv_final/direct-intrinsics/data/synthetic/images/'), mirror=True, shuffle=True, mean_value=[104, 117, 123], crop_size=(416, 416), pad=0, random_crop=True, random_scale=(1.0-0.2, 1.0+0.2), random_rotation=15, border_mode='BORDER_REFLECT')"
  }
  include: { phase: TRAIN }
}
layer {
  name: "noshadow"
  type: "Python"
  top: "noshadow"
  python_param {
    module: "caffe_helper.layers.data_layers"
    layer: "ImageDataLayer"
    param_str: "dict(batch_size=4, source=expandvars('/afs/csail.mit.edu/u/y/ylkuo/project/cv_final/direct-intrinsics/data/synthetic/sources/source_noshadow_train.txt'), root=expandvars('/afs/csail.mit.edu/u/y/ylkuo/project/cv_final/direct-intrinsics/data/synthetic/images/'), mirror=True, shuffle=True, color=True, crop_size=(416, 416), pad=0, random_crop=True, scale=1/256., random_scale=(1.0-0.2, 1.0+0.2), random_rotation=15)"
  }
  include: { phase: TRAIN }
}

##### Testing data #####

layer {
  name: "data"
  type: "Python"
  top: "data"
  python_param {
    module: "caffe_helper.layers.data_layers"
    layer: "ImageDataLayer"
    param_str: "dict(batch_size=4, source=expandvars('/afs/csail.mit.edu/u/y/ylkuo/project/cv_final/direct-intrinsics/data/synthetic/sources/source_shadow_test.txt'), root=expandvars('/afs/csail.mit.edu/u/y/ylkuo/project/cv_final/direct-intrinsics/data/synthetic/images/'), mean_value=[104, 117, 123], crop_size=(416, 416), shuffle=True, pad=0)"
  }
  include: { phase: TEST }
}

layer {
  name: "noshadow"
  type: "Python"
  top: "albedo"
  python_param {
    module: "caffe_helper.layers.data_layers"
    layer: "ImageDataLayer"
    param_str: "dict(batch_size=4, source=expandvars('/afs/csail.mit.edu/u/y/ylkuo/project/cv_final/direct-intrinsics/data/synthetic/sources/source_noshadow_test.txt'), root=expandvars('/afs/csail.mit.edu/u/y/ylkuo/project/cv_final/direct-intrinsics/data/synthetic/images/)', color=True, crop_size=(416, 416), scale=1/256., shuffle=True, pad=0)"
  }
  include: { phase: TEST }
}

##### AlexNet #####

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

##### Deconvolution for pixel prediction #####

layer {
  name: "up-noshadow"
  type: "Deconvolution"
  bottom: "fc8"
  top: "out-noshadow"
  convolution_param {
    kernel_size: 8
    stride: 4
    num_output: 3
    group: 1
    pad: 2
    weight_filler: { type: "gaussian" std: 0.001 }
    bias_term: true
  }
  param { lr_mult: 10 decay_mult: 1 }
  param { lr_mult: 20 decay_mult: 0 }
}

##### L2 loss for comparing shadows #####

layer {
  name: "log-noshadow"
  bottom: "noshadow"
  top: "noshadow"
  type: "Python"
  python_param {
    module: "caffe_helper.layers.common_layers"
    layer: "LogLayer"
    param_str: "dict(offset=0.5)"
  }
}
layer {
  name: "loss-noshadow"
  type: "HingeLoss"
  bottom: "out-noshadow"
  bottom: "noshadow"
  top: "loss-noshadow"
  hinge_loss_param {
    norm: L2
  }
}
